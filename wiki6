#!/usr/bin/python

import pycurl
import re
import sys

buf = ''
if len (sys.argv) < 3:
    print "Usage: ", sys.argv[0], " <wiki start entry> <wiki end entry>"
    sys.exit()

start_entry = sys.argv[1]
end_entry = sys.argv[2]

# Depending on the wiki used there may be main pages using normal wiki links
# that link to other wiki entries that are mostly irrelevant. Blacklist them
# here
BLACKLIST = ['Main_Page', 'Wikiquote']

# Base url for the wiki source being used and the format for the links.
# Modify these and you can use pretty much any wiki
BASE_URL = "http://en.wikipedia.org/wiki/"
wikilink = re.compile(".*<a href=\"/wiki/([a-zA-Z0-9_()]*)\" title=\".*\">.*")

# The initial parent used for nodes
parent = start_entry
callbackList = []
urls = []
urls.append(start_entry)
new_urls = []
visited = {}
visited[start_entry] = ''
depth = 0

# Callback for curl data because pycurl isn't as cool as libcurl and doesn't
# let me pass pointers to the callback
class callbackContainer:
    def parse_entry(self, body):
        global buf, urls, new_urls, visited
        for char in body:
            if char != '\n':
                buf += char
            else:
                buf = ''
            match = wikilink.match(buf)
            
            if match:
                new_url = match.group(1)
                if new_url not in visited and new_url not in BLACKLIST:
#                    print self.parent, "> ", depth, " > ", new_url
                    new_urls.append(new_url)
                    visited[new_url] = self.parent
                buf = ''

def startDownloads(urls):
    global BASE_URL, depth
    cMulti = pycurl.CurlMulti()
    print len(urls), "url(s) in depth", depth
    for url in urls:
        callback = callbackContainer()
        callback.parent = url
        child = pycurl.Curl()
        child.setopt(pycurl.URL, ''.join([BASE_URL, url]))
        child.setopt(pycurl.WRITEFUNCTION, callback.parse_entry)
        cMulti.add_handle(child)
        # Ensure a reference exists despite pycurl's best efforts
        callbackList.append(child)

    while True:
        ret, handles = cMulti.perform()
        if ret != pycurl.E_CALL_MULTI_PERFORM:
            break
    while handles:
        ret = cMulti.select(1.0)
        if ret == -1: continue
        while True:
            ret, handles = cMulti.perform()
            if ret != pycurl.E_CALL_MULTI_PERFORM:
                break

while end_entry not in visited and depth < 6:
    startDownloads(urls)
    urls = new_urls
    new_urls = []
    depth += 1

if end_entry in visited:
    path = []
    entry = end_entry
    path.append(entry)
    while entry != start_entry:
        entry = visited[entry]
        path.append(entry)
    sys.stdout.write("Path found: ")
    while path:
        node = path.pop()
        sys.stdout.write(node)
        if (path):
            sys.stdout.write(" > ")
    print '\n'
else:
    print "Couldn't find a path within 6 degrees :(\n"

